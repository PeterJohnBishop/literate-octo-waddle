openapi: 3.0.3
info:
  title: Redesigned Telegram Authentication API
  version: 1.3.0
  description: |
    Authentication and user management API served by this project.
servers:
  - url: http://localhost:8081
    description: Local server

paths:
  /:
    get:
      summary: Health message
      operationId: getRoot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/login:
    post:
      summary: Login with email and password
      operationId: postAuthLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  /auth/register:
    post:
      summary: Register a new user and receive tokens
      operationId: postAuthRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created and logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
        '500':
          description: Server error

  /auth/refresh:
    get:
      summary: Refresh access token using a refresh token
      operationId: getAuthRefresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '400':
          description: Missing or invalid refresh token
        '401':
          description: Invalid refresh token
        '500':
          description: Server error

  /auth/logout:
    post:
      summary: Logout a user and revoke tokens
      operationId: postAuthLogout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request body

  /api/users:
    get:
      summary: List users
      operationId: getUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      summary: Update a user (non-password fields)
      operationId: putUsers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  /api/users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Server error
    delete:
      summary: Delete user by ID
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Server error

  /api/users/password:
    post:
      summary: Update a user's password
      operationId: postUsersPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized or current password incorrect
        '404':
          description: User not found
        '500':
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          description: Hashed password in responses; plain text only on create
        online:
          type: boolean
        files:
          type: array
          items:
            type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
      required: [id, name, email]

    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        online:
          type: boolean
        files:
          type: array
          items:
            type: string
      required: [name, email, password]

    UserUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        online:
          type: boolean
        files:
          type: array
          items:
            type: string
      required: [id]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
          description: Access token (JWT)
        refreshToken:
          type: string
          description: Refresh token (JWT)
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
              format: email
            files:
              type: array
              items:
                type: string
            online:
              type: boolean
      required: [message, token, refreshToken, user]

    RefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required: [refresh_token]

    RefreshResponse:
      type: object
      properties:
        access_token:
          type: string
      required: [access_token]

    LogoutRequest:
      type: object
      properties:
        id:
          type: string
      required: [id]

    UpdatePasswordRequest:
      type: object
      properties:
        userId:
          type: string
        currentPassword:
          type: string
        newPassword:
          type: string
      required: [userId, currentPassword, newPassword]
